/*! For license information please see todo.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/Task.js":(e,t,a)=>{a.r(t),a.d(t,{Task:()=>n});var n=function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=(new Date).getTime(),this.name=t,this.isComplete=!1,this}},"./src/ToDoList.js":(e,t,a)=>{a.r(t),a.d(t,{ToDoList:()=>l});var n=a("./src/Task.js");function r(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=console.log,i=document,o=JSON,c=localStorage,l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.key=t,c.getItem(t)||c.setItem(t,o.stringify([])),this.addTask=this.addTask.bind(this),this.editTask=this.editTask.bind(this),this.removeTask=this.removeTask.bind(this)}var t,a;return t=e,(a=[{key:"addTask",value:function(e){if(e.target.value||alert("No puedes agregar una tarea vacia"),13===e.keyCode){var t=new n.Task(e.target.value),a=o.parse(c.getItem(this.key));a.push(t),c.setItem(this.key,o.stringify(a)),e.target.value=null,this.renderTask(t)}}},{key:"editTask",value:function(e){var t=this;if(e.target.matches("label")){var a=o.parse(c.getItem(this.key)),n=a.findIndex((function(t){return t.name===e.target.textContent})),r=i.querySelector('[data-id="'.concat(a[n].id,'"]')),s=function(e){e.target.textContent=e.target.textContent,a[n].name=e.target.textContent,c.setItem(t.key,o.stringify(a)),e.target.blur()};r.addEventListener("blur",(function(e){return s(e)})),r.addEventListener("keyup",(function(e){return 13===e.keyCode&&s(e)}))}}},{key:"removeTask",value:function(e){if(e.target.matches("a")){var t=o.parse(c.getItem(this.key)),a=t.findIndex((function(t){return t.id.toString()===e.target.dataset.id}));s(t,a),t.splice(a,1),c.setItem(this.key,o.stringify(t)),e.target.parentElement.remove()}}},{key:"renderTask",value:function(e){var t='\n      <li class="List-item '.concat(e.isComplete?"complete":"",'">\n        <input class="List-checkbox" type="checkbox" id="').concat(e.id,'" ').concat(e.isComplete?"checked":"",'>\n        <label class="List-label" data-id="').concat(e.id,'" contenteditable spellcheck>').concat(e.name,'</label>\n        <a class="List-removeLink" data-id="').concat(e.id,'" href="#">üóëÔ∏è</a>\n      </li>\n    ');list.insertAdjacentHTML("beforeend",t)}},{key:"render",value:function(){var e=this,t=o.parse(c.getItem(this.key)),a=list.children;s(a),t.forEach((function(t){return e.renderTask(t)})),Array.from(a).forEach((function(a){a.querySelector('input[type="checkbox"]').addEventListener("change",(function(a){var n=t.filter((function(e){return e.id==a.target.id}));a.target.checked?(a.target.parentElement.classList.add("complete"),n[0].isComplete=!0):(a.target.parentElement.classList.remove("complete"),n[0].isComplete=!1),c.setItem(e.key,o.stringify(t))}))})),task.addEventListener("keyup",this.addTask),list.addEventListener("click",this.editTask),list.addEventListener("click",this.removeTask)}}])&&r(t.prototype,a),e}()},"./src/scss/to_do.scss":(e,t,a)=>{a.r(t)}},t={};function a(n){if(t[n])return t[n].exports;var r=t[n]={exports:{}};return e[n](r,r.exports,a),r.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{a.r(n),a("./src/scss/to_do.scss");var e=a("./src/ToDoList.js"),t=document,r=t.getElementById("app"),s=t.createElement("input"),i=t.createElement("ul"),o=new e.ToDoList("myList2");s.id="task",s.classList.add("Task"),s.spellcheck=!0,s.placeholder="Tareas por hacer...",i.id="list",i.classList.add("List"),r.classList.add("ToDo"),r.appendChild(s),r.appendChild(i),o.render()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,